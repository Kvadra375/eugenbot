#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""

import asyncio
import json
import logging
import os
import sys
from datetime import datetime
from typing import Dict, List, Optional
import webbrowser
import pyperclip
import re

try:
    from telethon import TelegramClient, events
    from telethon.tl.types import User, Channel, Chat
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å telethon")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install telethon")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('debug_monitor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DebugMonitor:
    def __init__(self, config_file: str = 'config.json'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self.config = self.load_config(config_file)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        api_id = self.config['telegram']['api_id'] or os.getenv('TELEGRAM_API_ID')
        api_hash = self.config['telegram']['api_hash'] or os.getenv('TELEGRAM_API_HASH')
        session_name = self.config['telegram']['session_name']
        
        if not api_id or not api_hash:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á–∏ –≤ config.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.client = TelegramClient(session_name, api_id, api_hash)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'tickers_found': 0,
            'errors': 0,
            'start_time': None,
            'last_activity': None
        }

    def load_config(self, config_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.start()
        logger.info("üöÄ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
        self.stats['start_time'] = datetime.now()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.disconnect()
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def extract_ticker_data(self, message: str, source_name: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–æ—Ç–æ–≤
            for bot_name, bot_config in self.config['monitored_bots'].items():
                if not bot_config['enabled']:
                    continue
                    
                pattern = bot_config['pattern']
                
                # –ò—â–µ–º —Ç–∏–∫–µ—Ä
                ticker_match = re.search(pattern, message)
                if not ticker_match:
                    continue
                
                ticker = None
                direction = None
                
                if bot_name == 'pumply_futures_dex':
                    direction = ticker_match.group(1)
                    ticker = ticker_match.group(2)
                elif bot_name == 'mexcTracker':
                    ticker = ticker_match.group(1)
                    direction = ticker_match.group(2)
                else:  # kormushka_mexc
                    ticker = ticker_match.group(1)
                
                # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ —Å–µ—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                dex_info = self.extract_contract_info(message)
                
                return {
                    'ticker': ticker,
                    'direction': direction,
                    'dex_info': dex_info,
                    'bot_name': bot_name,
                    'timestamp': datetime.now()
                }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def extract_contract_info(self, message: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –∏ —Å–µ—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ GMGN –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            gmgn_match = re.search(r'gmgn\.ai/(\w+)/token/([a-fA-F0-9x]+)', message)
            if gmgn_match:
                chain = gmgn_match.group(1)
                contract = gmgn_match.group(2)
                return {
                    'type': 'gmgn',
                    'chain': chain,
                    'contract': contract,
                    'url': f"https://gmgn.ai/{chain}/token/{contract}"
                }
            
            # –ï—Å–ª–∏ GMGN —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –∏—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CA: 0x...
            ca_match = re.search(r'CA:\s*([a-fA-F0-9x]+)', message)
            if not ca_match:
                # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Å—Å—ã–ª–∫–∞—Ö dexscreener
                dexscreener_match = re.search(r'dexscreener\.com/(\w+)/([a-fA-F0-9x]+)', message)
                if dexscreener_match:
                    chain = dexscreener_match.group(1)
                    contract = dexscreener_match.group(2)
                else:
                    return None
            else:
                contract = ca_match.group(1)
                # –ò—â–µ–º —Å–µ—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                chain_match = re.search(r'Chain:\s*(\w+)', message)
                if chain_match:
                    chain = chain_match.group(1).lower()
                else:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–µ—Ç—å –≤ —Å—Å—ã–ª–∫–∞—Ö
                    chain_match = re.search(r'dexscreener\.com/(\w+)/', message)
                    if chain_match:
                        chain = chain_match.group(1).lower()
                    else:
                        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ethereum
                        chain = 'ethereum'
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç GMGN
            chain_mapping = {
                'ethereum': 'eth',
                'arbitrum': 'arb',
                'bsc': 'bsc',
                'polygon': 'polygon',
                'base': 'base',
                'solana': 'sol',
                'avalanche': 'avax'
            }
            
            gmgn_chain = chain_mapping.get(chain.lower(), chain.lower())
            
            return {
                'type': 'contract',
                'chain': gmgn_chain,
                'contract': contract,
                'url': f"https://gmgn.ai/{gmgn_chain}/token/{contract}"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return None

    def convert_ticker_to_mexc(self, ticker: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç MEXC"""
        return f"MEXC:{ticker}USDT.p"

    def copy_to_clipboard(self, text: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            if self.config['settings']['auto_copy_clipboard']:
                pyperclip.copy(text)
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {e}")
            return False

    def open_gmgn(self, dex_info: Dict) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç GMGN –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            if not self.config['settings']['auto_open_gmgn'] or not dex_info:
                return False
                
            url = dex_info['url']
            webbrowser.open(url)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è GMGN: {e}")
            return False

    async def process_message(self, message: str, source_name: str, message_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            self.stats['messages_processed'] += 1
            self.stats['last_activity'] = datetime.now()
            
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {source_name}: {message[:100]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞
            ticker_data = self.extract_ticker_data(message, source_name)
            if not ticker_data:
                logger.debug(f"–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {source_name}")
                return
            
            self.stats['tickers_found'] += 1
            ticker = ticker_data['ticker']
            direction = ticker_data.get('direction', 'N/A')
            dex_info = ticker_data.get('dex_info')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä
            mexc_ticker = self.convert_ticker_to_mexc(ticker)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            if self.copy_to_clipboard(mexc_ticker):
                logger.info(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {mexc_ticker}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º GMGN
            if self.open_gmgn(dex_info):
                logger.info(f"üåê –û—Ç–∫—Ä—ã—Ç–æ GMGN: {dex_info['url']}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç {source_name}: {ticker} -> {mexc_ticker} ({direction})")
            
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {source_name}: {e}")

    @events.register(events.NewMessage)
    async def handle_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender = event.sender
            message_text = event.message.message
            message_id = event.message.id
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –∏–º—è
            if isinstance(sender, User):
                source_name = f"@{sender.username}" if sender.username else f"User {sender.id}"
                source_type = "User"
            elif isinstance(sender, Channel):
                source_name = f"@{sender.username}" if sender.username else f"Channel {sender.id}"
                source_type = "Channel"
            elif isinstance(sender, Chat):
                source_name = f"Chat {sender.id}"
                source_type = "Chat"
            else:
                source_name = f"Unknown {type(sender).__name__}"
                source_type = "Unknown"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç [{source_type}] {source_name}: {message_text[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/–±–æ—Ç–æ–≤
            target_username = None
            if hasattr(sender, 'username') and sender.username:
                for bot_name, bot_config in self.config['monitored_bots'].items():
                    if bot_config['username'] == sender.username and bot_config['enabled']:
                        target_username = sender.username
                        break
            
            if target_username:
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–π –∫–∞–Ω–∞–ª/–±–æ—Ç: @{target_username}")
                await self.process_message(message_text, target_username, message_id)
            else:
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {source_name} (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)")
            
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    async def list_dialogs(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        logger.info("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤:")
        async for dialog in self.client.iter_dialogs():
            if dialog.is_channel or dialog.is_group:
                logger.info(f"  üì∫ {dialog.name} (@{dialog.entity.username}) - {dialog.entity.id}")
            elif dialog.is_user:
                logger.info(f"  üë§ {dialog.name} (@{dialog.entity.username}) - {dialog.entity.id}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        try:
            await self.start()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
            await self.list_dialogs()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            self.client.add_event_handler(self.handle_new_message)
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            enabled_bots = [f"@{config['username']}" for name, config in self.config['monitored_bots'].items() if config['enabled']]
            logger.info(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤/–±–æ—Ç–æ–≤: {', '.join(enabled_bots)}")
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            logger.info("üí° –í—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.run_until_disconnected()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.stop()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.stats['messages_processed']} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                       f"–Ω–∞–π–¥–µ–Ω–æ {self.stats['tickers_found']} —Ç–∏–∫–µ—Ä–æ–≤, "
                       f"–æ—à–∏–±–æ–∫ {self.stats['errors']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤/–±–æ—Ç–æ–≤")
    print("=" * 50)
    
    try:
        monitor = DebugMonitor()
        asyncio.run(monitor.run())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
