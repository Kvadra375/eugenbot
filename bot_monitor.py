#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –±–æ—Ç–æ–≤
–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Dict, List, Optional
import webbrowser
import pyperclip

try:
    from telethon import TelegramClient, events
    from telethon.tl.types import User
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å telethon")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install telethon")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_monitor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BotMonitor:
    def __init__(self, api_id: str, api_hash: str, session_name: str = 'eugenbot_monitor'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤
        
        Args:
            api_id: ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
            api_hash: Hash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
        """
        self.client = TelegramClient(session_name, api_id, api_hash)
        
        # –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitored_bots = {
            'mexcTracker': {
                'username': 'mexcTracker',
                'pattern': r'(\w+)\s+\|\s+[\d.]+%\s+\|\s+(Long|Short)',
                'dex_pattern': r'dexscreener\.com/(\w+)/([a-fA-F0-9x]+)',
                'enabled': True
            },
            'kormushka_mexc': {
                'username': 'kormushka_mexc',
                'pattern': r'(\w+)\s+\+[\d.]+%\s+in\s+\d+\s+secs!',
                'dex_pattern': r'gmgn\.ai/(\w+)/token/([a-fA-F0-9x]+)',
                'enabled': True
            },
            'pumply_futures_dex': {
                'username': 'pumply_futures_dex',
                'pattern': r'üîª\s+(SHORT|LONG)\s+\$(\w+)\s+\+[\d.]+%\s+on\s+MEXC',
                'dex_pattern': r'dexscreener\.com/(\w+)/([a-fA-F0-9x]+)',
                'enabled': True
            }
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'tickers_found': 0,
            'errors': 0,
            'start_time': None
        }

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.start()
        logger.info("üöÄ Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
        self.stats['start_time'] = datetime.now()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.disconnect()
        logger.info("üõë Telegram –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def extract_ticker(self, message: str, bot_name: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–∫–µ—Ä –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            import re
            
            bot_config = self.monitored_bots[bot_name]
            pattern = bot_config['pattern']
            dex_pattern = bot_config['dex_pattern']
            
            # –ò—â–µ–º —Ç–∏–∫–µ—Ä
            ticker_match = re.search(pattern, message)
            if not ticker_match:
                return None
            
            ticker = None
            direction = None
            
            if bot_name == 'pumply_futures_dex':
                direction = ticker_match.group(1)
                ticker = ticker_match.group(2)
            elif bot_name == 'mexc_tracker':
                ticker = ticker_match.group(1)
                direction = ticker_match.group(2)
            else:  # kormushka_mexc
                ticker = ticker_match.group(1)
            
            # –ò—â–µ–º DEX –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            dex_match = re.search(dex_pattern, message)
            dex_info = None
            if dex_match:
                if 'gmgn' in dex_pattern:
                    chain = dex_match.group(1)
                    contract = dex_match.group(2)
                    dex_info = {
                        'type': 'gmgn',
                        'chain': chain,
                        'contract': contract,
                        'url': f"https://gmgn.ai/{chain}/token/{contract}"
                    }
                elif 'dexscreener' in dex_pattern:
                    chain = dex_match.group(1)
                    contract = dex_match.group(2)
                    dex_info = {
                        'type': 'dexscreener',
                        'chain': chain,
                        'contract': contract,
                        'url': f"https://gmgn.ai/{chain}/token/{contract}"  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GMGN
                    }
            
            return {
                'ticker': ticker,
                'direction': direction,
                'dex_info': dex_info,
                'bot_name': bot_name
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ –∏–∑ {bot_name}: {e}")
            return None

    def convert_ticker_to_mexc(self, ticker: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç MEXC"""
        return f"MEXC:{ticker}USDT.p"

    def copy_to_clipboard(self, text: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            pyperclip.copy(text)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {e}")
            return False

    def open_gmgn(self, dex_info: Dict) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç GMGN –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            if not dex_info:
                return False
                
            url = dex_info['url']
            webbrowser.open(url)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è GMGN: {e}")
            return False

    async def process_message(self, message: str, bot_name: str, message_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"""
        try:
            self.stats['messages_processed'] += 1
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä
            ticker_data = self.extract_ticker(message, bot_name)
            if not ticker_data:
                logger.debug(f"–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {bot_name}")
                return
            
            self.stats['tickers_found'] += 1
            ticker = ticker_data['ticker']
            direction = ticker_data.get('direction', 'N/A')
            dex_info = ticker_data.get('dex_info')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä
            mexc_ticker = self.convert_ticker_to_mexc(ticker)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            if self.copy_to_clipboard(mexc_ticker):
                logger.info(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {mexc_ticker}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º GMGN
            if dex_info and self.open_gmgn(dex_info):
                logger.info(f"üåê –û—Ç–∫—Ä—ã—Ç–æ GMGN: {dex_info['url']}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç @{bot_name}: {ticker} -> {mexc_ticker} ({direction})")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.stats['messages_processed'] % 10 == 0:
                self.print_stats()
                
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {bot_name}: {e}")

    def print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uptime = datetime.now() - self.stats['start_time'] if self.stats['start_time'] else "N/A"
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.stats['messages_processed']} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                   f"–Ω–∞–π–¥–µ–Ω–æ {self.stats['tickers_found']} —Ç–∏–∫–µ—Ä–æ–≤, "
                   f"–æ—à–∏–±–æ–∫ {self.stats['errors']}, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")

    @events.register(events.NewMessage)
    async def handle_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–æ—Ç–∞)
            if not isinstance(event.sender, User):
                return
            
            sender_username = event.sender.username
            if not sender_username:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –±–æ—Ç–æ–≤
            bot_name = None
            for name, config in self.monitored_bots.items():
                if config['username'] == sender_username and config['enabled']:
                    bot_name = name
                    break
            
            if not bot_name:
                return
            
            message_text = event.message.message
            message_id = event.message.id
            
            logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{sender_username}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.process_message(message_text, bot_name, message_id)
            
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        try:
            await self.start()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            self.client.add_event_handler(self.handle_new_message)
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            enabled_bots = [name for name, config in self.monitored_bots.items() if config['enabled']]
            logger.info(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–æ–≤: {', '.join(enabled_bots)}")
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.run_until_disconnected()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.stop()
            self.print_stats()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    
    if not api_id or not api_hash:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   TELEGRAM_API_ID - ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram")
        print("   TELEGRAM_API_HASH - Hash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram")
        print("\nüìã –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –º–æ–∂–Ω–æ –Ω–∞ https://my.telegram.org/apps")
        print("\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (Windows):")
        print("   set TELEGRAM_API_ID=your_api_id")
        print("   set TELEGRAM_API_HASH=your_api_hash")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = BotMonitor(api_id, api_hash)
    
    try:
        asyncio.run(monitor.run())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()

