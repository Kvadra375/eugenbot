#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot Parser –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏
–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–∫–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç MEXC
"""

import re
import webbrowser
import pyperclip
import time
from typing import Optional, Dict, List, Tuple
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TelegramBotParser:
    def __init__(self):
        self.ticker_patterns = {
            'mexc_tracker': r'(\w+)\s+\|\s+[\d.]+%\s+\|\s+(Long|Short)',
            'kormushka': r'(\w+)\s+\+[\d.]+%\s+in\s+\d+\s+secs!',
            'pumply': r'üîª\s+(SHORT|LONG)\s+\$(\w+)\s+\+[\d.]+%\s+on\s+MEXC'
        }
        
        self.dex_patterns = {
            'dexscreener': r'dexscreener\.com/(\w+)/([a-fA-F0-9x]+)',
            'gmgn': r'gmgn\.ai/(\w+)/token/([a-fA-F0-9x]+)'
        }

    def parse_mexc_tracker_message(self, message: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @mexcTracker"""
        try:
            # –ò—â–µ–º —Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "DEXE | 8.17% | Long"
            ticker_match = re.search(self.ticker_patterns['mexc_tracker'], message)
            if not ticker_match:
                return None
                
            ticker = ticker_match.group(1)
            direction = ticker_match.group(2)
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ dexscreener
            dexscreener_match = re.search(self.dex_patterns['dexscreener'], message)
            dex_info = None
            if dexscreener_match:
                chain = dexscreener_match.group(1)
                contract = dexscreener_match.group(2)
                dex_info = {
                    'type': 'dexscreener',
                    'chain': chain,
                    'contract': contract,
                    'url': f"https://dexscreener.com/{chain}/{contract}"
                }
            
            return {
                'ticker': ticker,
                'direction': direction,
                'dex_info': dex_info,
                'source': 'mexc_tracker'
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ mexc_tracker: {e}")
            return None

    def parse_kormushka_message(self, message: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @kormushka_mexc"""
        try:
            # –ò—â–µ–º —Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "FTT +3.61% in 10 secs!"
            ticker_match = re.search(self.ticker_patterns['kormushka'], message)
            if not ticker_match:
                return None
                
            ticker = ticker_match.group(1)
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ gmgn
            gmgn_match = re.search(self.dex_patterns['gmgn'], message)
            dex_info = None
            if gmgn_match:
                chain = gmgn_match.group(1)
                contract = gmgn_match.group(2)
                dex_info = {
                    'type': 'gmgn',
                    'chain': chain,
                    'contract': contract,
                    'url': f"https://gmgn.ai/{chain}/token/{contract}"
                }
            
            return {
                'ticker': ticker,
                'direction': None,  # –í —ç—Ç–æ–º –±–æ—Ç–µ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                'dex_info': dex_info,
                'source': 'kormushka'
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ kormushka: {e}")
            return None

    def parse_pumply_message(self, message: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @pumply_futures_dex"""
        try:
            # –ò—â–µ–º —Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "üîª SHORT $RICE +6.32% on MEXC"
            ticker_match = re.search(self.ticker_patterns['pumply'], message)
            if not ticker_match:
                return None
                
            direction = ticker_match.group(1)
            ticker = ticker_match.group(2)
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ dexscreener –≤ network
            dexscreener_match = re.search(self.dex_patterns['dexscreener'], message)
            dex_info = None
            if dexscreener_match:
                chain = dexscreener_match.group(1)
                contract = dexscreener_match.group(2)
                dex_info = {
                    'type': 'dexscreener',
                    'chain': chain,
                    'contract': contract,
                    'url': f"https://dexscreener.com/{chain}/{contract}"
                }
            
            return {
                'ticker': ticker,
                'direction': direction,
                'dex_info': dex_info,
                'source': 'pumply'
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ pumply: {e}")
            return None

    def convert_ticker_to_mexc_format(self, ticker: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç MEXC"""
        return f"MEXC:{ticker}USDT.p"

    def copy_to_clipboard(self, text: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            pyperclip.copy(text)
            logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {text}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {e}")
            return False

    def open_gmgn_in_browser(self, dex_info: Dict) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç DEX —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è dexscreener –≤ gmgn"""
        try:
            if not dex_info:
                logger.warning("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ DEX –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
                return False
                
            if dex_info['type'] == 'gmgn':
                # –£–∂–µ GMGN —Å—Å—ã–ª–∫–∞
                url = dex_info['url']
            elif dex_info['type'] == 'dexscreener':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dexscreener –≤ gmgn
                chain = dex_info['chain']
                contract = dex_info['contract']
                url = f"https://gmgn.ai/{chain}/token/{contract}"
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø DEX: {dex_info['type']}")
                return False
                
            webbrowser.open(url)
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {url}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
            return False

    def process_message(self, message: str) -> Optional[Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª—é–±–æ–≥–æ –∏–∑ –±–æ—Ç–æ–≤"""
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∂–¥—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
        parsers = [
            self.parse_mexc_tracker_message,
            self.parse_kormushka_message,
            self.parse_pumply_message
        ]
        
        for parser in parsers:
            result = parser(message)
            if result:
                return result
                
        return None

    def handle_message(self, message: str) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            parsed_data = self.process_message(message)
            if not parsed_data:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return False
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä
            mexc_ticker = self.convert_ticker_to_mexc_format(parsed_data['ticker'])
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            if not self.copy_to_clipboard(mexc_ticker):
                return False
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º DEX –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            if parsed_data['dex_info']:
                self.open_gmgn_in_browser(parsed_data['dex_info'])
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {parsed_data['source']}: {mexc_ticker}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parser = TelegramBotParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        # mexc_tracker
        """Arbitrage (https://t.me/c/2447107119/77592) with DEXE ended 1m, 5s

DEXE | 8.17% | Long 

Price Gate (https://www.gate.io/futures/USDT/DEXE_USDT?ref=VLMQUL9YCA): 8.944
Price Dexscreener (https://dexscreener.com/ethereum/0xde4EE8057785A7e8e800Db58F9784845A5C2Cbd6): 9.74

CA: 0xde4EE8057785A7e8e800Db58F9784845A5C2Cbd6
Chain: ethereum""",
        
        # kormushka
        """FTT +3.61% in 10 secs!
MEXC (https://futures.mexc.com/exchange/FTT_USDT) ‚Äî GMGN (https://gmgn.ai/eth/token/0x50d1c9771902476076ecfc8b2a83ad6b9355a4c9) | Limit ~$95900""",
        
        # pumply
        """üîª SHORT $RICE +6.32% on MEXC

mexc: $0.098
dex: $0.09292916686752106
size: $104 (+$7)

deposit: ‚úÖ  withdraw: ‚úÖ

‚è±Ô∏è 00:07

liquidity: $1.4M
volume 24h: $6.4M
network: BEP20 (https://dexscreener.com/bsc/0x2afdf2cd0384a3b5d7836b70c8da5e73841ba826)
contract: 0xb5761f36FdFE2892f1b54Bc8EE8baBb2a1b698D3"""
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ Telegram –±–æ—Ç–æ–≤...")
    print("=" * 50)
    
    for i, message in enumerate(test_messages, 1):
        print(f"\n–¢–µ—Å—Ç {i}:")
        print("-" * 30)
        success = parser.handle_message(message)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

if __name__ == "__main__":
    main()

