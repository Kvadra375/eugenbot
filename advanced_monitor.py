#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –±–æ—Ç–æ–≤ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
"""

import asyncio
import json
import logging
import os
import sys
import time
from datetime import datetime
from typing import Dict, List, Optional
import webbrowser
import pyperclip
import re

try:
    from telethon import TelegramClient, events
    from telethon.tl.types import User
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å telethon")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install telethon")
    sys.exit(1)

class AdvancedBotMonitor:
    def __init__(self, config_file: str = 'config.json'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        self.config = self.load_config(config_file)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = getattr(logging, self.config['settings']['log_level'])
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('bot_monitor.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        api_id = self.config['telegram']['api_id'] or os.getenv('TELEGRAM_API_ID')
        api_hash = self.config['telegram']['api_hash'] or os.getenv('TELEGRAM_API_HASH')
        session_name = self.config['telegram']['session_name']
        
        if not api_id or not api_hash:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á–∏ –≤ config.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.client = TelegramClient(session_name, api_id, api_hash)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'tickers_found': 0,
            'blacklisted_tickers': 0,
            'errors': 0,
            'start_time': None,
            'last_activity': None
        }
        
        # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        self.blacklist_enabled = self.config.get('blacklist', {}).get('enabled', False)
        self.blacklisted_tickers = set(self.config.get('blacklist', {}).get('tickers', []))
        if self.blacklist_enabled:
            self.logger.info(f"üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω: {len(self.blacklisted_tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
            self.logger.info(f"üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {', '.join(sorted(self.blacklisted_tickers))}")
        else:
            self.logger.info("‚úÖ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.processed_messages = set()
        self.max_cache_size = 1000

    def load_config(self, config_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            self.logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.start()
        self.logger.info("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä –±–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        self.stats['start_time'] = datetime.now()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.disconnect()
        self.logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def is_ticker_blacklisted(self, ticker: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–∏–∫–µ—Ä –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        if not self.blacklist_enabled:
            return False
        
        ticker_upper = ticker.upper()
        is_blacklisted = ticker_upper in self.blacklisted_tickers
        
        if is_blacklisted:
            self.stats['blacklisted_tickers'] += 1
            self.logger.info(f"üö´ –¢–∏–∫–µ—Ä {ticker} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        
        return is_blacklisted

    def extract_ticker_data(self, message: str, bot_name: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            bot_config = self.config['monitored_bots'][bot_name]
            pattern = bot_config['pattern']
            
            # –ò—â–µ–º —Ç–∏–∫–µ—Ä
            ticker_match = re.search(pattern, message)
            if not ticker_match:
                return None
            
            ticker = None
            direction = None
            
            if bot_name == 'pumply_futures_dex':
                direction = ticker_match.group(1)
                ticker = ticker_match.group(2)
            elif bot_name == 'mexcTracker':
                ticker = ticker_match.group(1)
                direction = ticker_match.group(2)
            elif bot_name == 'MexcDexSpreadTracker':
                direction = ticker_match.group(2)
                ticker = ticker_match.group(3)
            else:  # kormushka_mexc
                ticker = ticker_match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if self.is_ticker_blacklisted(ticker):
                return None
            
            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ —Å–µ—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            dex_info = self.extract_contract_info(message)
            
            return {
                'ticker': ticker,
                'direction': direction,
                'dex_info': dex_info,
                'bot_name': bot_name,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {bot_name}: {e}")
            return None

    def extract_contract_info(self, message: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –∏ —Å–µ—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # 0. –î–µ—Ç–µ–∫—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–ª–∞–Ω–∞-–º–∏–Ω—Ç–∞ –ø–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—é #SOLANA/sol/solana –∏ base58-–∞–¥—Ä–µ—Å–∞
            solana_mint_match = re.search(r'\b([1-9A-HJ-NP-Za-km-z]{32,44})\b', message)
            if solana_mint_match and re.search(r'(#?SOLANA|\bsolana\b|\bSOL\b)', message, re.IGNORECASE):
                contract = solana_mint_match.group(1)
                chain = 'sol'
                self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω Solana mint: {contract}")
                return {
                    'type': 'gmgn',
                    'chain': chain,
                    'contract': contract,
                    'url': f"https://gmgn.ai/{chain}/token/{contract}"
                }

            # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ GMGN –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            gmgn_match = re.search(r'gmgn\.ai/(\w+)/token/([a-fA-F0-9x]+|[1-9A-HJ-NP-Za-km-z]+)', message)
            if gmgn_match:
                chain = gmgn_match.group(1)
                contract = gmgn_match.group(2)
                self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ GMGN —Å—Å—ã–ª–∫–∞: {chain}/{contract}")
                return {
                    'type': 'gmgn',
                    'chain': chain,
                    'contract': contract,
                    'url': f"https://gmgn.ai/{chain}/token/{contract}"
                }
            
            # 2. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CA: (–ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç)
            ca_match = re.search(r'CA:\s*([^\s\n]+)', message)
            if ca_match:
                contract = ca_match.group(1)
                self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç CA: {contract}")
                
                # –ò—â–µ–º —Å–µ—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                chain_match = re.search(r'Chain:\s*(\w+)', message)
                if chain_match:
                    chain = chain_match.group(1).lower()
                    self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Ç—å Chain: {chain}")
                else:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–µ—Ç—å –≤ —Å—Å—ã–ª–∫–∞—Ö dexscreener
                    chain_match = re.search(r'dexscreener\.com/(\w+)/', message)
                    if chain_match:
                        chain = chain_match.group(1).lower()
                        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Ç—å –≤ dexscreener: {chain}")
                    else:
                        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ethereum
                        chain = 'ethereum'
                        self.logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {chain}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç GMGN
                chain_mapping = {
                    'ethereum': 'eth',
                    'arbitrum': 'arb',
                    'bsc': 'bsc',
                    'polygon': 'polygon',
                    'base': 'base',
                    'solana': 'sol',
                    'avalanche': 'avax',
                    'sol': 'sol',  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è network: SOL
                    'bep20': 'bsc'  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è network: BEP20
                }
                
                gmgn_chain = chain_mapping.get(chain.lower(), chain.lower())
                self.logger.info(f"üîç GMGN —Å–µ—Ç—å: {gmgn_chain}")
                
                return {
                    'type': 'contract',
                    'chain': gmgn_chain,
                    'contract': contract,
                    'url': f"https://gmgn.ai/{gmgn_chain}/token/{contract}"
                }
            
            # 3. –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ contract: (–¥–ª—è pumply_futures_dex)
            contract_match = re.search(r'contract:\s*([^\s\n]+)', message, re.IGNORECASE)
            if contract_match:
                contract = contract_match.group(1)
                self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç contract: {contract}")
                
                # –ò—â–µ–º —Å–µ—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                network_match = re.search(r'network:\s*(\w+)', message, re.IGNORECASE)
                if network_match:
                    chain = network_match.group(1).lower()
                    self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Ç—å network: {chain}")
                else:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–µ—Ç—å –≤ —Å—Å—ã–ª–∫–∞—Ö dexscreener
                    chain_match = re.search(r'dexscreener\.com/(\w+)/', message)
                    if chain_match:
                        chain = chain_match.group(1).lower()
                        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Ç—å –≤ dexscreener: {chain}")
                    else:
                        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ethereum
                        chain = 'ethereum'
                        self.logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {chain}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç GMGN
                chain_mapping = {
                    'ethereum': 'eth',
                    'arbitrum': 'arb',
                    'bsc': 'bsc',
                    'polygon': 'polygon',
                    'base': 'base',
                    'solana': 'sol',
                    'avalanche': 'avax',
                    'sol': 'sol',  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è network: SOL
                    'bep20': 'bsc'  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è network: BEP20
                }
                
                gmgn_chain = chain_mapping.get(chain.lower(), chain.lower())
                self.logger.info(f"üîç GMGN —Å–µ—Ç—å: {gmgn_chain}")
                
                return {
                    'type': 'contract',
                    'chain': gmgn_chain,
                    'contract': contract,
                    'url': f"https://gmgn.ai/{gmgn_chain}/token/{contract}"
                }
            
            
            # 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ —Å—Å—ã–ª–∫–∞—Ö dexscreener
            dexscreener_match = re.search(r'dexscreener\.com/(\w+)/([^)]+)', message)
            if dexscreener_match:
                chain = dexscreener_match.group(1)
                contract = dexscreener_match.group(2)
                self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ dexscreener: {contract} –Ω–∞ —Å–µ—Ç–∏ {chain}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç GMGN
                chain_mapping = {
                    'ethereum': 'eth',
                    'arbitrum': 'arb',
                    'bsc': 'bsc',
                    'polygon': 'polygon',
                    'base': 'base',
                    'solana': 'sol',
                    'avalanche': 'avax',
                    'sol': 'sol',
                    'bep20': 'bsc'  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è network: BEP20
                }
                
                gmgn_chain = chain_mapping.get(chain.lower(), chain.lower())
                
                return {
                    'type': 'dexscreener',
                    'chain': gmgn_chain,
                    'contract': contract,
                    'url': f"https://gmgn.ai/{gmgn_chain}/token/{contract}"
                }
            
            self.logger.info("üîç –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return None

    def convert_ticker_to_mexc(self, ticker: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç MEXC"""
        return f"MEXC:{ticker}USDT.p"

    def copy_to_clipboard(self, text: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            if self.config['settings']['auto_copy_clipboard']:
                pyperclip.copy(text)
                return True
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {e}")
            return False

    def open_gmgn(self, dex_info: Dict) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç GMGN –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            self.logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å GMGN: auto_open_gmgn={self.config['settings']['auto_open_gmgn']}, dex_info={dex_info is not None}")
            
            if not self.config['settings']['auto_open_gmgn']:
                self.logger.info("‚è≠Ô∏è –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ GMGN –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return False
                
            if not dex_info:
                self.logger.info("‚è≠Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ DEX –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
                return False
                
            url = dex_info['url']
            self.logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º URL: {url}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            try:
                webbrowser.open(url)
                self.logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ webbrowser.open()")
                return True
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è webbrowser.open() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ subprocess
                import subprocess
                try:
                    subprocess.run(['start', url], shell=True, check=True)
                    self.logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ subprocess")
                    return True
                except Exception as e2:
                    self.logger.warning(f"‚ö†Ô∏è subprocess —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                    
                    # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ os.startfile
                    import os
                    try:
                        os.startfile(url)
                        self.logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ os.startfile()")
                        return True
                    except Exception as e3:
                        self.logger.error(f"‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {e3}")
                        return False
                        
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è GMGN: {e}")
            return False

    def send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.config['notifications']['enabled']:
            return
        
        try:
            if self.config['notifications']['desktop']:
                # –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                self.logger.info(f"üîî {message}")
            
            if self.config['notifications']['sound']:
                # –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (Windows)
                try:
                    import winsound
                    winsound.Beep(1000, 200)
                except ImportError:
                    pass
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def process_message(self, message: str, bot_name: str, message_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            message_hash = hash(f"{bot_name}_{message_id}_{message[:100]}")
            if message_hash in self.processed_messages:
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            self.processed_messages.add(message_hash)
            if len(self.processed_messages) > self.max_cache_size:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                self.processed_messages = set(list(self.processed_messages)[-self.max_cache_size//2:])
            
            self.stats['messages_processed'] += 1
            self.stats['last_activity'] = datetime.now()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞
            ticker_data = self.extract_ticker_data(message, bot_name)
            if not ticker_data:
                self.logger.debug(f"–¢–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {bot_name}")
                return
            
            self.stats['tickers_found'] += 1
            ticker = ticker_data['ticker']
            direction = ticker_data.get('direction', 'N/A')
            dex_info = ticker_data.get('dex_info')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä
            mexc_ticker = self.convert_ticker_to_mexc(ticker)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            if self.copy_to_clipboard(mexc_ticker):
                self.logger.info(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {mexc_ticker}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º GMGN
            self.logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å GMGN —Å –¥–∞–Ω–Ω—ã–º–∏: {dex_info}")
            if self.open_gmgn(dex_info):
                self.logger.info(f"üåê –û—Ç–∫—Ä—ã—Ç–æ GMGN: {dex_info['url']}")
            else:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å GMGN")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_msg = f"–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ä –æ—Ç @{bot_name}: {ticker} -> {mexc_ticker}"
            self.send_notification(notification_msg)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç @{bot_name}: {ticker} -> {mexc_ticker} ({direction})")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.stats['messages_processed'] % self.config['settings']['stats_interval'] == 0:
                self.print_stats()
                
        except Exception as e:
            self.stats['errors'] += 1
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {bot_name}: {e}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—à–∏–±–æ–∫
            if self.stats['errors'] >= self.config['settings']['max_errors']:
                self.logger.critical(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {self.stats['errors']}")
                await self.stop()
                sys.exit(1)

    def print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uptime = datetime.now() - self.stats['start_time'] if self.stats['start_time'] else "N/A"
        last_activity = self.stats['last_activity'].strftime("%H:%M:%S") if self.stats['last_activity'] else "N/A"
        
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.stats['messages_processed']} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                        f"–Ω–∞–π–¥–µ–Ω–æ {self.stats['tickers_found']} —Ç–∏–∫–µ—Ä–æ–≤, "
                        f"–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {self.stats['blacklisted_tickers']} —Ç–∏–∫–µ—Ä–æ–≤, "
                        f"–æ—à–∏–±–æ–∫ {self.stats['errors']}, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}, "
                        f"–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}")

    def _collect_embedded_urls(self, event) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ URL –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π Telegram (–≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ —Å—Å—ã–ª–∫–∏)."""
        urls: List[str] = []
        try:
            from telethon.tl.types import MessageEntityTextUrl, MessageEntityUrl
            if getattr(event, 'message', None) is None:
                return urls
            entities = getattr(event.message, 'entities', None) or []
            message_text = event.message.message or ""
            for ent in entities:
                # –Ø–≤–Ω—ã–µ URL –≤ —Ç–µ–∫—Å—Ç–µ
                if isinstance(ent, MessageEntityUrl):
                    try:
                        urls.append(message_text[ent.offset: ent.offset + ent.length])
                    except Exception:
                        pass
                # –°–∫—Ä—ã—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ [GMGN](https://gmgn.ai/..)
                if isinstance(ent, MessageEntityTextUrl) and getattr(ent, 'url', None):
                    urls.append(ent.url)
        except Exception:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            return urls
        return urls

    def _collect_button_urls(self, event) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ inline-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (reply_markup)."""
        urls: List[str] = []
        try:
            reply_markup = getattr(event.message, 'reply_markup', None)
            if not reply_markup or not getattr(reply_markup, 'rows', None):
                return urls
            for row in reply_markup.rows:
                buttons = getattr(row, 'buttons', []) or []
                for btn in buttons:
                    # –£ –∫–Ω–æ–ø–∫–∏ —Å URL –∞—Ç—Ä–∏–±—É—Ç –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è url
                    url = getattr(btn, 'url', None)
                    if url:
                        urls.append(url)
        except Exception:
            return urls
        return urls

    @events.register(events.NewMessage)
    async def handle_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from telethon.tl.types import User, Channel, Chat
            
            if not isinstance(event.sender, (User, Channel, Chat)):
                return
            
            sender_username = getattr(event.sender, 'username', None)
            if not sender_username:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/–±–æ—Ç–æ–≤
            bot_name = None
            for name, config in self.config['monitored_bots'].items():
                if config['username'] == sender_username and config['enabled']:
                    bot_name = name
                    break
            
            if not bot_name:
                return
            
            message_text = event.message.message
            # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø–∞—Ä—Å–µ—Ä –≤–∏–¥–µ–ª GMGN/DEX —Å—Å—ã–ª–∫–∏
            extra_urls: List[str] = []
            extra_urls.extend(self._collect_embedded_urls(event))
            extra_urls.extend(self._collect_button_urls(event))
            if extra_urls:
                message_text = f"{message_text}\n" + " \n".join(extra_urls)
            message_id = event.message.id
            
            self.logger.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{sender_username}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.process_message(message_text, bot_name, message_id)
            
        except Exception as e:
            self.stats['errors'] += 1
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        try:
            await self.start()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            self.client.add_event_handler(self.handle_new_message)
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            enabled_bots = [f"@{config['username']}" for name, config in self.config['monitored_bots'].items() if config['enabled']]
            self.logger.info(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–æ–≤: {', '.join(enabled_bots)}")
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.run_until_disconnected()
            
        except KeyboardInterrupt:
            self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.stop()
            self.print_stats()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä Telegram –±–æ—Ç–æ–≤")
    print("=" * 50)
    
    try:
        monitor = AdvancedBotMonitor()
        asyncio.run(monitor.run())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
